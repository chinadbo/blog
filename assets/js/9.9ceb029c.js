(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{168:function(e,s,a){"use strict";a.r(s);var t=a(0),n=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,s=e.$createElement,a=e._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"揭秘javascript中“神秘”的this关键字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#揭秘javascript中“神秘”的this关键字","aria-hidden":"true"}},[e._v("#")]),e._v(" 揭秘JavaScript中“神秘”的this关键字")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/3/5/1694ba9cc370a928?w=800&h=533&f=png&s=584832",alt:""}})]),e._v(" "),a("p",[e._v("当我开始学习"),a("code",[e._v("JavaScript")]),e._v("时，花了一些时间来理解"),a("code",[e._v("JavaScript")]),e._v("中的"),a("code",[e._v("this")]),e._v("关键字并且能够快速识别"),a("code",[e._v("this")]),e._v("关键字所指向的对象。我发现理解"),a("code",[e._v("this")]),e._v("关键字最困难的事情是，您通常会忘记在您已阅读或观看过一些"),a("code",[e._v("JavaScript")]),e._v("课程或资源中解释的不同案例情况。在"),a("code",[e._v("ES6")]),e._v("中引入箭头函数后，事情变得更加混乱，因为箭头函数"),a("code",[e._v("this")]),e._v("以不同的方式处理关键字。我想写这篇文章来陈述我学到的东西，并尝试以一种可以帮助任何正在学习"),a("code",[e._v("JavaScript")]),e._v("并且难以理解"),a("code",[e._v("this")]),e._v("关键字的人的方式来解释它。")]),e._v(" "),a("p",[e._v("您可能知道，执行任何"),a("code",[e._v("JavaScript")]),e._v("行的环境（或"),a("code",[e._v("scope")]),e._v("）称为“"),a("strong",[e._v("执行上下文")]),e._v("”。"),a("strong",[a("code",[e._v("Javascript")]),e._v("运行时")]),e._v("维护这些执行上下文的堆栈，并且当前正在执行存在于该堆栈顶部的执行上下文。"),a("code",[e._v("this")]),e._v("变量引用的对象每次更改执行上下文时都会更改。")]),e._v(" "),a("p",[e._v("默认情况下，执行上下文是全局的，这意味着如果代码作为简单函数调用的一部分执行，则该"),a("code",[e._v("this")]),e._v("变量将引用"),a("strong",[e._v("全局对象")]),e._v("。在浏览器的情况下，全局对象是"),a("code",[e._v("window")]),e._v("对象。例如，在"),a("code",[e._v("Node.js")]),e._v("环境中，this值是一个特殊对象"),a("code",[e._v("global")]),e._v("。")]),e._v(" "),a("p",[e._v("例如，尝试以下简单的函数调用：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function foo () {\n  console.log("Simple function call");\n  console.log(this === window);\n}\nfoo();\n')])])]),a("p",[e._v("调用"),a("code",[e._v("foo()")]),e._v("，得到输出：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("“Simple function call”\ntrue\n")])])]),a("p",[e._v("证明这里的"),a("code",[e._v("this")]),e._v("指向全局对象，此例中为"),a("code",[e._v("window")]),e._v("。")]),e._v(" "),a("p",[e._v("注意，如果实在"),a("strong",[e._v("严格模式")]),e._v("下，"),a("code",[e._v("this")]),e._v("的值将是"),a("code",[e._v("undefined")]),e._v("，因为在严格模式下全局对象指向"),a("code",[e._v("undefined")]),e._v("而不是"),a("code",[e._v("window")]),e._v("。")]),e._v(" "),a("p",[e._v("试一下如下示例：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function foo () {\n  'use strict';\n  console.log(\"Simple function call\");\n  console.log(this === window);\n}\nfoo();\n")])])]),a("p",[e._v("输出：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("“Simple function call”\nfalse\n")])])]),a("p",[e._v("我们再来试下有"),a("strong",[e._v("构造函数")]),e._v("的：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function Person(first_name, last_name) {\n    this.first_name = first_name;\n    this.last_name = last_name;\n  \n    this.displayName = function() {\n        console.log(`Name: ${this.first_name} ${this.last_name}`);\n    };\n}\n")])])]),a("p",[e._v("创建"),a("code",[e._v("Person")]),e._v("实例：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let john = new Person('John', 'Reid');\njohn.displayName();\n")])])]),a("p",[e._v("得到结果：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('"Name: John Reid"\n')])])]),a("p",[e._v("这里发生了什么？当我们调用 "),a("code",[e._v("new Person")]),e._v("，"),a("code",[e._v("JavaScript")]),e._v("会在"),a("code",[e._v("Person")]),e._v("函数内创建一个新对象并把它保存为"),a("code",[e._v("this")]),e._v("。接着，"),a("code",[e._v("first_name")]),e._v(", "),a("code",[e._v("last_name")]),e._v(" 和 "),a("code",[e._v("displayName")]),e._v(" 属性会被添加到新创建的"),a("code",[e._v("this")]),e._v("对象上。如下：")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/3/5/1694bc389b7febfb?w=800&h=642&f=png&s=116051",alt:""}})]),e._v(" "),a("p",[e._v("你会注意到在"),a("code",[e._v("Person")]),e._v("的"),a("strong",[e._v("执行上下文")]),e._v("中创建了"),a("code",[e._v("this")]),e._v("对象，这个对象有"),a("code",[e._v("first_name")]),e._v(", "),a("code",[e._v("last_name")]),e._v(" 和 "),a("code",[e._v("displayName")]),e._v(" 属性。希望您能根据上图理解"),a("code",[e._v("this")]),e._v("对象是如何创建并添加属性的。")]),e._v(" "),a("p",[e._v("我们已经探讨了两种相关"),a("code",[e._v("this")]),e._v("绑定的普通案例我不得不提出下面这个更加困惑的例子，如下函数：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('function simpleFunction () {\n    console.log("Simple function call")\n    console.log(this === window); \n}\n')])])]),a("p",[e._v("我们已经知道如果像下面这样作为简单函数调用，"),a("code",[e._v("this")]),e._v("关键字将指向全局对象，此例中为"),a("code",[e._v("window")]),e._v("对象。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("simpleFunction()\n")])])]),a("p",[e._v("因此，得到输出：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("“Simple function call”\ntrue\n")])])]),a("p",[e._v("创建一个简单的"),a("code",[e._v("user")]),e._v("对象：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let user = {\n    count: 10,\n    simpleFunction: simpleFunction,\n    anotherFunction: function() {\n        console.log(this === window);\n    }\n}\n")])])]),a("p",[e._v("现在，我们有一个"),a("code",[e._v("simpleFunction")]),e._v("属性指向"),a("code",[e._v("simpleFunction")]),e._v("函数，同样添加另一个属性调用"),a("code",[e._v("anotherFunction")]),e._v("函数方法。")]),e._v(" "),a("p",[e._v("如果调用"),a("code",[e._v("user.simpleFunction()")]),e._v("，得到输出：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("“Simple function call”\nfalse\n")])])]),a("p",[e._v("为什么会这样呢？因为"),a("code",[e._v("simpleFunction()")]),e._v("现在是"),a("code",[e._v("user")]),e._v("对象的一个属性，所以"),a("code",[e._v("this")]),e._v("指向这个"),a("code",[e._v("user")]),e._v("对象而不是全局对象。")]),e._v(" "),a("p",[e._v("当我们调用"),a("code",[e._v("user.anotherFunction")]),e._v("，也是一样的结果。"),a("code",[e._v("this")]),e._v("关键字指向"),a("code",[e._v("user")]),e._v("对象。所以，"),a("code",[e._v("console.log(this === window);")]),e._v("应该返回"),a("code",[e._v("false")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("false\n")])])]),a("p",[e._v("再来，以下操作会返回什么呢？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let myFunction = user.anotherFunction;\nmyFunction();\n")])])]),a("p",[e._v("现在，得到结果：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("true\n")])])]),a("p",[e._v("所以这又发生了什么？在这个例子中，我们发起普通函数调用。正如之前所知，如果一个方法以普通函数方式执行，那么"),a("code",[e._v("this")]),e._v("关键字将指向全局对象（在这个例子中是"),a("code",[e._v("window")]),e._v("对象）。所以"),a("code",[e._v("console.log(this === window);")]),e._v("输出"),a("code",[e._v("true")]),e._v("。")]),e._v(" "),a("p",[e._v("再看一个例子：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var john = {\n    name: 'john',\n    yearOfBirth: 1990,\n    calculateAge: function() {\n        console.log(this);\n        console.log(2016 - this.yearOfBirth);\n        function innerFunction() {\n            console.log(this);\n        }\n        innerFunction();\n    }\n}\n")])])]),a("p",[e._v("调用"),a("code",[e._v("john.calculateAge()")]),e._v("会发生什么呢？")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('{name: "john", yearOfBirth: 1990, calculateAge: ƒ}\n26\nWindow {postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, parent: Window, …}\n')])])]),a("p",[a("code",[e._v("calculateAge")]),e._v("函数内部， "),a("code",[e._v("this")]),e._v(" 指向 "),a("code",[e._v("john")]),e._v("对象，但是，在"),a("code",[e._v("innerFunction")]),e._v("函数内部，"),a("code",[e._v("this")]),e._v("指向全局对象（本例中为"),a("code",[e._v("window")]),e._v("），有些人认为这是"),a("code",[e._v("JS")]),e._v("的bug，但是规则告诉我们无论何时一个普通函数被调用时，那么"),a("code",[e._v("this")]),e._v("将指向全局对象。")]),e._v(" "),a("p",[e._v("...")]),e._v(" "),a("p",[e._v("我所学的"),a("code",[e._v("JavaScript")]),e._v("函数也是一种特殊的对象，每个函数都有"),a("code",[e._v("call")]),e._v(", "),a("code",[e._v("apply")]),e._v(", "),a("code",[e._v("bind")]),e._v("方法。这些方法被用来设置函数的执行上下文的"),a("code",[e._v("this")]),e._v("值。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function Person(firstName, lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.displayName = function() {\n        console.log(`Name: ${this.firstName} ${this.lastName}`);\n    }\n}\n")])])]),a("p",[e._v("创建两个实例：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let person = new Person("John", "Reed");\nlet person2 = new Person("Paul", "Adams");\n')])])]),a("p",[e._v("调用：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("person.displayName();\nperson2.displayName();\n")])])]),a("p",[e._v("结果：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Name: John Reed\nName: Paul Adams\n")])])]),a("p",[e._v("call：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("person.displayName.call(person2);\n")])])]),a("p",[e._v("上面所做的事情就是设置"),a("code",[e._v("this")]),e._v("的值为"),a("code",[e._v("person2")]),e._v("对象。因此，")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Name: Paul Adams\n")])])]),a("p",[e._v("apply：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("person.displayName.apply([person2]);\n")])])]),a("p",[e._v("得到：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Name: Paul Adams\n")])])]),a("p",[a("code",[e._v("call")]),e._v("，"),a("code",[e._v("apply")]),e._v("唯一的区别就是参数的传递形式，"),a("code",[e._v("apply")]),e._v("应该传递一个数组，"),a("code",[e._v("call")]),e._v("则应该单独传递参数。")]),e._v(" "),a("p",[e._v("我们用"),a("code",[e._v("bind")]),e._v("来做同样的事情，"),a("code",[e._v("bind")]),e._v("返回一个新的方法，这个方法中的"),a("code",[e._v("this")]),e._v("指向传递的第一个参数。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let person2Display = person.displayName.bind(person2);\n")])])]),a("p",[e._v("调用"),a("code",[e._v("person2Display")]),e._v("，得到"),a("code",[e._v("Name: Paul Adams")]),e._v("结果。")]),e._v(" "),a("p",[e._v("...")]),e._v(" "),a("h2",{attrs:{id:"箭头函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#箭头函数","aria-hidden":"true"}},[e._v("#")]),e._v(" 箭头函数")]),e._v(" "),a("p",[e._v("ES6中，有一个新方法定义函数。如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("let displayName = (firstName, lastName) => {\n    console.log(Name: ${firstName} ${lastName});\n};\n")])])]),a("p",[e._v("不像通常的函数，箭头函数没有他们自身的"),a("code",[e._v("this")]),e._v("关键字。他们只是简单的使用写在函数里的"),a("code",[e._v("this")]),e._v("关键字。他们有一个"),a("code",[e._v("this")]),e._v("词法变量。")]),e._v(" "),a("p",[e._v("ES5：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var box = {\n    color: 'green', // 1\n    position: 1, // 2\n    clickMe: function() { // 3\n        document.querySelector('body').addEventListener('click', function() {\n            var str = 'This is box number ' + this.position + ' and it is ' + this.color; // 4\n            alert(str);\n        });\n    }\n}\n")])])]),a("p",[e._v("如果调用：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("box.clickMe()\n")])])]),a("p",[e._v("弹出框内容将是"),a("code",[e._v("This is box number undefined and it is undefined'")]),e._v(".")]),e._v(" "),a("p",[e._v("我们一步一步来分析是怎么回事。在"),a("code",[e._v("//1")]),e._v("和"),a("code",[e._v("//2")]),e._v("行，"),a("code",[e._v("this")]),e._v("关键字能访问到"),a("code",[e._v("color")]),e._v("和"),a("code",[e._v("position")]),e._v("属性因为它指向"),a("code",[e._v("box")]),e._v("对象。在"),a("code",[e._v("clickMe")]),e._v("方法内部，"),a("code",[e._v("this")]),e._v("关键字能访问到"),a("code",[e._v("color")]),e._v("和"),a("code",[e._v("position")]),e._v("属性因为它也指向"),a("code",[e._v("box")]),e._v("对象。但是，"),a("code",[e._v("clickMe")]),e._v("方法为"),a("code",[e._v("querySelector")]),e._v("方法定义了一个回调函数，然后这个回调函数以普通函数的形式调用，所以"),a("code",[e._v("this")]),e._v("指向全局对象而非"),a("code",[e._v("box")]),e._v("对象。当然，全局对象没有定义"),a("code",[e._v("color")]),e._v("和"),a("code",[e._v("position")]),e._v("属性，所以这就是为什么我们得到了"),a("code",[e._v("undefined")]),e._v("值。")]),e._v(" "),a("p",[e._v("我们可以用ES5的方法来修复这个问题：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var box = {\n    color: 'green',\n    position: 1,\n    clickMe: function() {\n        var self = this;\n        document.querySelector('body').addEventListener('click', function() {\n            var str = 'This is box number ' + self.position + ' and it is ' + self.color;\n            alert(str);\n        });\n    }\n}\n")])])]),a("p",[e._v("添加 "),a("code",[e._v("var self = this")]),e._v("，创建了一个可以使用指向"),a("code",[e._v("box")]),e._v("对象的"),a("code",[e._v("this")]),e._v("关键字的闭包函数的工作区。我们仅仅只需要在回调函数内使用"),a("code",[e._v("self")]),e._v("变量。")]),e._v(" "),a("p",[e._v("调用：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("box.clickMe();\n")])])]),a("p",[e._v("弹出框内容"),a("code",[e._v("This is box number 1 and it is green")]),e._v("。")]),e._v(" "),a("p",[e._v("怎么使用箭头函数能够达到上述效果呢？我们将用箭头函数替换点击函数的回调函数。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var box = {\n    color: 'green',\n    position: 1,\n    clickMe: function() {\n        document.querySelector('body').addEventListener('click', () => {\n            var str = 'This is box number ' + this.position + ' and it is ' + this.color;\n            alert(str);\n        });\n    }\n}\n")])])]),a("p",[e._v("箭头函数的神奇之处就是共享包裹它的"),a("code",[e._v("this")]),e._v("词法关键字。所以，本例中外层函数的"),a("code",[e._v("this")]),e._v("共享给箭头函数，这个外层函数的"),a("code",[e._v("this")]),e._v("关键字指向"),a("code",[e._v("box")]),e._v("对象，因此，"),a("code",[e._v("color")]),e._v("和"),a("code",[e._v("position")]),e._v("属性将是有正确的"),a("code",[e._v("green")]),e._v("和"),a("code",[e._v("1")]),e._v("值。")]),e._v(" "),a("p",[e._v("再来一个：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("var box = {\n    color: 'green',\n    position: 1,\n    clickMe: () => {\n        document.querySelector('body').addEventListener('click', () => {\n            var str = 'This is box number ' + this.position + ' and it is ' + this.color;\n            alert(str);\n        });\n    }\n}\n")])])]),a("p",[e._v("oh！现在又弹出了"),a("code",[e._v("‘This is box number undefined and it is undefined’.")]),e._v("。为什么？")]),e._v(" "),a("p",[a("code",[e._v("click")]),e._v("事件监听函数闭包的"),a("code",[e._v("this")]),e._v("关键字共享了包裹它的"),a("code",[e._v("this")]),e._v("关键字。在本例中它被包裹的箭头函数"),a("code",[e._v("clickMe")]),e._v("，"),a("code",[e._v("clickMe")]),e._v("箭头函数的"),a("code",[e._v("this")]),e._v("关键字指向全局对象，本例中是"),a("code",[e._v("window")]),e._v("对象。所以"),a("code",[e._v("this.color")]),e._v("和"),a("code",[e._v("this.position")]),e._v("将会是"),a("code",[e._v("undefined")]),e._v("因为"),a("code",[e._v("window")]),e._v("对象没有"),a("code",[e._v("position")]),e._v("和"),a("code",[e._v("color")]),e._v("属性。")]),e._v(" "),a("p",[e._v("我想再给你看个在很多情况下都会有帮助的"),a("code",[e._v("map")]),e._v("函数，我们定义一个"),a("code",[e._v("Person")]),e._v("构造函数方法如下：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("function Person(firstName, lastName) {\n    this.firstName = firstName;\n    this.lastName = lastName;\n    this.displayName = function() {\n        console.log(`Name: ${this.firstName} ${this.lastName}`);\n    }\n}\n")])])]),a("p",[a("code",[e._v("Person")]),e._v("的原型上添加"),a("code",[e._v("myFriends")]),e._v("方法：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Person.prototype.myFriends = function(friends) {\n    var arr = friends.map(function(friend) {\n        return this.firstName + ' is friends with ' + friend;\n    });\n    console.log(arr);\n}\n")])])]),a("p",[e._v("创建一个实例：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('let john = new Person("John", "Watson");\n')])])]),a("p",[e._v("调用"),a("code",[e._v('john.myFriends(["Emma", "Tom"])')]),e._v("，结果：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('["undefined is friends with Emma", "undefined is friends with Tom"]\n')])])]),a("p",[e._v("本例与之前的例子非常相似。"),a("code",[e._v("myFriends")]),e._v("函数体内有"),a("code",[e._v("this")]),e._v("关键字指向回调对象。但是，"),a("code",[e._v("map")]),e._v("闭包函数内是一个普通函数调用。所以"),a("code",[e._v("map")]),e._v("闭包函数内"),a("code",[e._v("this")]),e._v("指向全局对象，本例中为"),a("code",[e._v("window")]),e._v("对象，因此"),a("code",[e._v("this.firstName")]),e._v("undefined。现在，我们试着修复这个情况。")]),e._v(" "),a("ol",[a("li",[e._v("在"),a("code",[e._v("myFriends")]),e._v("函数体内指定"),a("code",[e._v("this")]),e._v("为其它变量如"),a("code",[e._v("self")]),e._v("，以便"),a("code",[e._v("map")]),e._v("函数内闭包使用它。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Person.prototype.myFriends = function(friends) {\n    // 'this' keyword maps to the calling object\n    var self = this;\n    var arr = friends.map(function(friend) {\n        // 'this' keyword maps to the global object\n        // here, 'this.firstName' is undefined.\n        return self.firstName + ' is friends with ' + friend;\n    });\n    console.log(arr);\n}\n")])])]),a("ol",{attrs:{start:"2"}},[a("li",[a("code",[e._v("map")]),e._v("闭包函数使用"),a("code",[e._v("bind")]),e._v("。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Person.prototype.myFriends = function(friends) {\n    // 'this' keyword maps to the calling object\n    var arr = friends.map(function(friend) {\n        // 'this' keyword maps to the global object\n        // here, 'this.firstName' is undefined.\n        return this.firstName + ' is friends with ' + friend;\n    }.bind(this));\n    console.log(arr);\n}\n")])])]),a("p",[e._v("调用"),a("code",[e._v("bind")]),e._v("会返回一个"),a("code",[e._v("map")]),e._v("回调函数的副本，"),a("code",[e._v("this")]),e._v("关键字映射到外层的"),a("code",[e._v("this")]),e._v("关键字，也就是是调用"),a("code",[e._v("myFriends")]),e._v("方法，"),a("code",[e._v("this")]),e._v("指向这个对象。")]),e._v(" "),a("ol",{attrs:{start:"3"}},[a("li",[e._v("创建"),a("code",[e._v("map")]),e._v("回调函数为箭头函数。")])]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("Person.prototype.myFriends = function(friends) {\n    var arr = friends.map(friend => `${this.firstName} is friends with ${friend}`);\n    console.log(arr);\n}\n")])])]),a("p",[e._v("现在，箭头函数内的"),a("code",[e._v("this")]),e._v("关键字将共享未曾包裹它的词法作用域，也就是说实例"),a("code",[e._v("myFriends")]),e._v("。")]),e._v(" "),a("p",[e._v("所有以上解决方案都将输出结果：")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('["John is friends with Emma", "John is friends with Tom"]\n')])])]),a("p",[e._v("...")]),e._v(" "),a("p",[e._v("在这一点上，我希望我已经设法使"),a("code",[e._v("this")]),e._v("关键字概念对您来说有点平易近人。在本文中，我分享了我遇到的一些常见情况以及如何处理它们，但当然，在构建更多项目时，您将面临更多情况。我希望我的解释可以帮助您在接近"),a("code",[e._v("this")]),e._v("关键字绑定主题时保持坚实的基础。如果您有任何问题，建议或改进，我总是乐于学习更多知识并与所有知名开发人员交流知识。请随时写评论，或给我留言！")])])}],!1,null,null,null);s.default=n.exports}}]);